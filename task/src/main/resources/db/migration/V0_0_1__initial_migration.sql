CREATE TABLE IF NOT EXISTS educational_plan
(
    id    BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    plans varchar[]
);
--
CREATE TABLE IF NOT EXISTS t_group
(
    id       BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    t_number VARCHAR(10)
    );
--
CREATE TABLE IF NOT EXISTS student
(
    id        BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    firstname VARCHAR(64),
    lastname  VARCHAR(64),
    age       int,
    group_id  BIGINT REFERENCES t_group (id)
    );
--
CREATE TABLE IF NOT EXISTS academic_performance
(
    id            BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    physics       int DEFAULT 0,
    mathematics   int DEFAULT 0,
    rus           int DEFAULT 0,
    literature    int DEFAULT 0,
    geometry      int DEFAULT 0,
    informatics   int DEFAULT 0,
    average_grade double precision,
    student_id    BIGINT REFERENCES student (id)
    );
--
CREATE OR REPLACE FUNCTION average_grade_trigger()
    RETURNS TRIGGER
    LANGUAGE plpgsql as
$$
begin
    new.average_grade :=
                (new.physics + new.mathematics + new.rus + new.literature + new.geometry + new.informatics) / 6;
RETURN new;
end
$$;
--
CREATE TRIGGER average_grade_trigger
    BEFORE INSERT OR UPDATE
                         ON academic_performance
                         FOR EACH ROW
                         EXECUTE PROCEDURE average_grade_trigger();





